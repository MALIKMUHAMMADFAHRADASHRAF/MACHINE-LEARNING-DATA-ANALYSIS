# -*- coding: utf-8 -*-
"""12354 ML ASSIGNMENT 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hmw6lSBXBSiagttl0VyZXdFVbRDcTogg
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# QuesƟon 1: Data Loading and InspecƟon
# Load the data from the file
data = pd.read_csv('/content/Iris.csv')

# Examine the data
print("Number of data points (rows):", len(data))
print("Column names:", data.columns)
print("Data types for each column:\n", data.dtypes)

# Check for missing values or duplicates
print("Missing values:\n", data.isnull().sum())
print("Number of duplicates:", data.duplicated().sum())

# Q 2
# Remove 'Iris-' from the species names
data['Species'] = data['Species'].str.replace('Iris-', '')

# Display the updated species names
print(data['Species'].unique())

# QuesƟon 3: Data ExploraƟon
# Number of each species present
species_counts = data['Species'].value_counts()
print("Number of each species:\n", species_counts)

# Mean, median, quantiles, and ranges for each measurement
measurement_stats = data.describe().transpose()[['mean', '50%', '25%', '75%', 'min', 'max']]
print("Mean, median, quantiles, and ranges for each measurement:\n", measurement_stats)

# Q 4
# Group by species and calculate mean and median
mean_by_species = data.groupby('Species').mean()
median_by_species = data.groupby('Species').median()

# Display the mean for each species
print("Mean for each species:")
print(mean_by_species)

# Display the median for each species
print("\nMedian for each species:")
print(median_by_species)

# Q 5
# Scatter plot of sepal_length vs sepal_width
plt.scatter(data['SepalLengthCm'], data['SepalWidthCm'])

# Label the axes
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')

# Give the plot a title
plt.title('Scatter Plot of Sepal Length vs Sepal Width')

# Show the plot
plt.show()

# Q 6
# Create a histogram of petal_length
plt.hist(data['PetalLengthCm'], bins=25)

# Label the axes
plt.xlabel('Petal Length (cm)')
plt.ylabel('Frequency')

# Give the plot a title
plt.title('Histogram of Petal Length')

# Show the histogram
plt.show()

# Q 6
# Create a histogram of petal_length with 25 bins
plt.hist(data['PetalLengthCm'], bins=25)

# Label the x-axis
plt.xlabel('Petal Length (cm)')

# Label the y-axis
plt.ylabel('Frequency')

# Give the plot a title
plt.title('Histogram of Petal Length')

# Show the histogram
plt.show()

# Q 7
# Create histograms for all features overlaid
ax = data.plot.hist(alpha=0.5, bins=25, figsize=(10, 6))

# Label the axes
plt.xlabel('Measurement (cm)')
plt.ylabel('Frequency')

# Give the plot a title
plt.title('Histograms for Petal and Sepal Measurements')

# Add a legend
plt.legend(title='Feature')

# Show the plot
plt.show()

# Q 8
# Create boxplots for each petal and sepal measurement
data.boxplot(column=['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm'], by='Species', figsize=(12, 8))

# Label the y-axis
plt.ylabel('Measurement (cm)')

# Give the plot a title
plt.title('Boxplots of Petal and Sepal Measurements by Species')

# Show the plot
plt.show()

# Q 9
import seaborn as sns

# Melt the data
melted_data = pd.melt(data, id_vars='Species', value_vars=['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm'])

# Set Seaborn style, context, and palette
sns.set(style='whitegrid')
sns.set_context('notebook')
sns.set_palette('dark')

# Create a boxplot with Seaborn
plt.figure(figsize=(12, 8))
sns.boxplot(x='variable', y='value', hue='Species', data=melted_data)

# Label the y-axis
plt.ylabel('Measurement (cm)')

# Give the plot a title
plt.title('Boxplot of Petal and Sepal Measurements by Species')

# Show the plot
plt.show()

# Q 10
import seaborn as sns

# Set Seaborn style and context
sns.set(style='ticks')
sns.set_context('notebook')

# Create a pairplot with Seaborn
sns.pairplot(data, hue='Species', height=2.5)

# Display the plot
plt.show()